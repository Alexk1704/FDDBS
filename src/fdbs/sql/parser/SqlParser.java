/* Generated By:JavaCC: Do not edit this line. SqlParser.java */
package fdbs.sql.parser;

import java.util.ArrayList;
import java.util.List;
import java.io.*;

import fdbs.sql.parser.ast.*;
import fdbs.sql.parser.ast.statement.*;
import fdbs.sql.parser.ast.statement.select.*;
import fdbs.sql.parser.ast.identifier.*;
import fdbs.sql.parser.ast.constraint.*;
import fdbs.sql.parser.ast.clause.*;
import fdbs.sql.parser.ast.clause.boundary.*;
import fdbs.sql.parser.ast.attribute.*;
import fdbs.sql.parser.ast.type.*;
import fdbs.sql.parser.ast.literal.*;
import fdbs.sql.parser.ast.expression.*;
import fdbs.sql.parser.ast.extension.*;
import fdbs.sql.parser.ast.function.*;

import fdbs.util.logger.*;

/**
 * A sql parser.
 */
public class SqlParser implements SqlParserConstants {

  /**
   * The Constructor for sql parser with a sql statement.
   * @param statement A sql statement.
   */
  public SqlParser(String statement) {
    this(new StringReader(statement));
  }

  private static void handleParseException(ParseException parseException) throws ParseException {
    ParseException throwing = parseException;

    if (parseException.expectedTokenSequences != null && parseException.expectedTokenSequences.length == 1) {
      StringBuffer expected = new StringBuffer();
      int nextTokenSize = 0;

      for (int i = 0; i < parseException.expectedTokenSequences.length; i++) {

        if (nextTokenSize <  parseException.expectedTokenSequences[i].length) {
          nextTokenSize =  parseException.expectedTokenSequences[i].length;
        }

        for (int j = 0; j < parseException.expectedTokenSequences[i].length; j++) {
          expected.append(parseException.tokenImage[parseException.expectedTokenSequences[i][j]]);
        }
      }

      if(expected.toString().equals("<IDENTIFIER>") /* || expected.toString().equals("\"CONSTRAINT\"") */ ){
        Token nextToken = parseException.currentToken.next;
        String invalidIdentifierName = ParseException.add_escapes(nextToken.image);
        throwing = new ParseException(String.format("%s: Invalid identifier \u005c"%s\u005c" - You used a reserved word at line %s in column %s.", SqlParser.class.getSimpleName(), invalidIdentifierName, nextToken.beginLine, nextToken.beginColumn));
      }
    }

    throw throwing;
  }

/************************************************
 * THE SQL GRAMMAR SPECIFICATION STARTS HERE *
 ************************************************/
/**
 * Parse a sql statement and builds an abstract syntax tree related to the statement.
 * @return the abstract syntax tree related to constructor statement parameter
 * @throws ParseException
 */
  final public AST parseStatement() throws ParseException {
   Statement rootNode;
    Logger.infoln(String.format("%s: Parsing and constructing Abstract syntax tree startet.", this.getClass().getSimpleName()));
    try {
      rootNode = Statement();
      jj_consume_token(0);
      AST ast = new AST();
      ast.setRoot(rootNode);
      Logger.infoln(String.format("%s: Parsing and constructing Abstract syntax tree finished.", this.getClass().getSimpleName()));
      {if (true) return ast;}
    } catch (ParseException parseException) {
    handleParseException(parseException);
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a sql statement.
 * @return Returns the parsed sql statement.
 */
  final public Statement Statement() throws ParseException {
  Statement statement;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CREATE:
    case DROP:
      statement = DDLStatement();
      break;
    case DELETE:
    case INSERT:
    case UPDATE:
      statement = DMLStatement();
      break;
    case SELECT:
      statement = DQLStatement();
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

/*****************************************************************
 * Data Definition Language (DDL) SPECIFICATION STARTS HERE *
 *****************************************************************/

/**
 * Parse a data definition language statement.
 * @return Returns the parsed data definition language statement.
 */
  final public Statement DDLStatement() throws ParseException {
  Statement statement;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CREATE:
      statement = FederationCreateTableStatement();
      break;
    case DROP:
      statement = DropTableStatement();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a federated create table statement.
 * @return Returns the parsed federated create table statement.
 */
  final public Statement FederationCreateTableStatement() throws ParseException {
  CreateTableStatement statement;
  HorizontalClause horizontalClause;
  VerticalClause verticalClause;
    statement = CreateTableStatement();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HORIZONTAL:
    case VERTICAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HORIZONTAL:
        horizontalClause = HorizontalClause();
                                             statement.setHorizontalClause(horizontalClause);
        break;
      case VERTICAL:
        verticalClause = VerticalClause();
                                         statement.setVerticalClause(verticalClause);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a create table statement.
 * @return Returns the parsed create table statement.
 */
  final public CreateTableStatement CreateTableStatement() throws ParseException {
  TableIdentifier identifier;
  List<TableAttribute> attributes;
  List<Constraint> constraints;
    jj_consume_token(CREATE);
    jj_consume_token(TABLE);
    identifier = TableIdentifier();
    jj_consume_token(LPAREN);
    attributes = ListOfTableAttributes();
    jj_consume_token(COMMA);
    constraints = ListOfConstraints();
    jj_consume_token(RPAREN);
    {if (true) return new CreateTableStatement(identifier, attributes, constraints);}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a horizontal clause.
 * @return Returns the parsed horizontal clause.
 */
  final public HorizontalClause HorizontalClause() throws ParseException {
  AttributeIdentifier identifier;
  Boundary boundary;
  Boundary additionalBoundary = null;
    jj_consume_token(HORIZONTAL);
    jj_consume_token(LPAREN);
    identifier = AttributeIdentifier();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_CONSTANT:
      boundary = IntegerBoundary();
      break;
    case STRING_CONSTANT:
      boundary = StringBoundary();
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_CONSTANT:
        additionalBoundary = IntegerBoundary();
        break;
      case STRING_CONSTANT:
        additionalBoundary = StringBoundary();
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    jj_consume_token(RPAREN);
    {if (true) return new HorizontalClause(identifier, additionalBoundary == null ? null : boundary, additionalBoundary == null ? boundary : additionalBoundary);}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a horizontal clause integer boundary.
 * @return Returns the parsed horizontal clause integer boundary.
 */
  final public Boundary IntegerBoundary() throws ParseException {
  IntegerLiteral literal;
    literal = IntegerLiteral();
    {if (true) return new IntegerBoundary(literal);}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a horizontal clause string boundary.
 * @return Returns the parsed horizontal clause string boundary.
 */
  final public Boundary StringBoundary() throws ParseException {
  StringLiteral literal;
    literal = StringLiteral();
    {if (true) return new StringBoundary(literal);}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a vertical clause.
 * @return Returns the parsed vertical clause.
 */
  final public VerticalClause VerticalClause() throws ParseException {
  List<AttributeIdentifier> attributesForDB1;
  List<AttributeIdentifier> attributesForDB2;
  List<AttributeIdentifier> attributesForDB3 = null;
    jj_consume_token(VERTICAL);
    jj_consume_token(LPAREN);
    attributesForDB1 = VerticalListOfAttributes();
    jj_consume_token(COMMA);
    attributesForDB2 = VerticalListOfAttributes();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      attributesForDB3 = VerticalListOfAttributes();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    {if (true) return new VerticalClause(attributesForDB1, attributesForDB2, attributesForDB3);}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a list of vertical clause attributes.
 * @return Returns the parsed list of vertical clause attributes.
 */
  final public List<AttributeIdentifier> VerticalListOfAttributes() throws ParseException {
  List<AttributeIdentifier> attibutes = new ArrayList<AttributeIdentifier>();
  AttributeIdentifier identifier;
    jj_consume_token(LPAREN);
    identifier = AttributeIdentifier();
                                         attibutes.add(identifier);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_1;
      }
      jj_consume_token(COMMA);
      identifier = AttributeIdentifier();
                                                   attibutes.add(identifier);
    }
    jj_consume_token(RPAREN);
    {if (true) return attibutes;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a list of table attributes.
 * @return Returns the parsed list of table attributes.
 */
  final public List<TableAttribute> ListOfTableAttributes() throws ParseException {
  List<TableAttribute> attributes = new ArrayList<TableAttribute>();
  TableAttribute attribute;
    attribute = TableAttribute();
                                 attributes.add(attribute);
    label_2:
    while (true) {
      if (jj_2_1(2147483647)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(COMMA);
      attribute = TableAttribute();
                                           attributes.add(attribute);
    }
    {if (true) return attributes;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a table attribute.
 * @return Returns the parsed table attribute.
 */
  final public TableAttribute TableAttribute() throws ParseException {
  AttributeIdentifier identifier;
  Type type;
  Literal defaultValue = null;
    identifier = AttributeIdentifier();
    type = AttributeType();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEFAULT_Token:
      jj_consume_token(DEFAULT_Token);
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_CONSTANT:
        defaultValue = IntegerLiteral();
        break;
      case STRING_CONSTANT:
        defaultValue = StringLiteral();
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    {if (true) return new TableAttribute(identifier, type, defaultValue);}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a table attribute type.
 * @return Returns the parsed table attribute type.
 */
  final public Type AttributeType() throws ParseException {
  Token idToken;
  IntegerLiteral varCharLength;
  Type type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      idToken = jj_consume_token(INTEGER);
                           type = new PrimitiveType(idToken.image);
      break;
    case VARCHAR:
      jj_consume_token(VARCHAR);
      jj_consume_token(LPAREN);
      varCharLength = IntegerLiteral();
      jj_consume_token(RPAREN);
                                                                    type = new VarCharType(varCharLength);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a list of constraints which must contains a primary key constraint.
 * @return Returns the parsed list of constraints.
 */
  final public List<Constraint> ListOfConstraints() throws ParseException {
  List<Constraint> constraints = new ArrayList<Constraint>();
  Constraint constraint;
  boolean containsPrimaryKeyConstraint = false;
  ConstraintIdentifier constraintIdentifier;
    constraintIdentifier = ConstraintPrefix();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIMARYKEY:
      constraint = PrimaryKeyConstraint(constraintIdentifier);
                                                                                                          containsPrimaryKeyConstraint = true;
      break;
    case UNIQUE:
      constraint = UniqueConstraint(constraintIdentifier);
      break;
    case FOREIGNKEY:
      constraint = ForeignKeyConstraint(constraintIdentifier);
      break;
    case CHECK:
      constraint = CheckConstraint(constraintIdentifier);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    constraints.add(constraint);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      constraintIdentifier = ConstraintPrefix();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRIMARYKEY:
        constraint = PrimaryKeyConstraint(constraintIdentifier);
                                                                                                                    containsPrimaryKeyConstraint = true;
        break;
      case UNIQUE:
        constraint = UniqueConstraint(constraintIdentifier);
        break;
      case FOREIGNKEY:
        constraint = ForeignKeyConstraint(constraintIdentifier);
        break;
      case CHECK:
        constraint = CheckConstraint(constraintIdentifier);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      constraints.add(constraint);
    }
    if(!containsPrimaryKeyConstraint){
      {if (true) throw new ParseException(String.format("%s: A CREATE TABLE statement requires a primary key constraint.", this.getClass().getSimpleName()));}
    }

    {if (true) return constraints;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a constraint prefix.
 * @return Returns the parsed constraint prefix.
 */
  final public ConstraintIdentifier ConstraintPrefix() throws ParseException {
  Token identifier;
    jj_consume_token(CONSTRAINT);
    identifier = jj_consume_token(IDENTIFIER);
    {if (true) return new ConstraintIdentifier(identifier);}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a primary key constraint.
 * @param constraintIdentifier A constraint identifier node which represent the primary key constraint name.
 * @return Returns the parsed primary key constraint.
 */
  final public PrimaryKeyConstraint PrimaryKeyConstraint(ConstraintIdentifier constraintIdentifier) throws ParseException {
  AttributeIdentifier attributeIdentifier;
    jj_consume_token(PRIMARYKEY);
    jj_consume_token(LPAREN);
    attributeIdentifier = AttributeIdentifier();
    jj_consume_token(RPAREN);
    {if (true) return new PrimaryKeyConstraint(constraintIdentifier, attributeIdentifier);}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a unique constraint.
 * @param constraintIdentifier A constraint identifier node which represent the unique constraint name.
 * @return Returns the parsed unique constraint.
 */
  final public UniqueConstraint UniqueConstraint(ConstraintIdentifier constraintIdentifier) throws ParseException {
  AttributeIdentifier attributeIdentifier;
    jj_consume_token(UNIQUE);
    jj_consume_token(LPAREN);
    attributeIdentifier = AttributeIdentifier();
    jj_consume_token(RPAREN);
    {if (true) return new UniqueConstraint(constraintIdentifier, attributeIdentifier);}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a foreign key constraint.
 * @param constraintIdentifier A constraint identifier node which represent the foreign key constraint name.
 * @return Returns the parsed foreign key constraint.
 */
  final public ForeignKeyConstraint ForeignKeyConstraint(ConstraintIdentifier constraintIdentifier) throws ParseException {
  AttributeIdentifier attributeIdentifier;
  TableIdentifier referencedTable;
  AttributeIdentifier referencedAttribute;
    jj_consume_token(FOREIGNKEY);
    jj_consume_token(LPAREN);
    attributeIdentifier = AttributeIdentifier();
    jj_consume_token(RPAREN);
    jj_consume_token(REFERENCES);
    referencedTable = TableIdentifier();
    jj_consume_token(LPAREN);
    referencedAttribute = AttributeIdentifier();
    jj_consume_token(RPAREN);
    {if (true) return new ForeignKeyConstraint(constraintIdentifier, attributeIdentifier, referencedTable, referencedAttribute);}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a check constraint.
 * @param constraintIdentifier A constraint identifier node which represent the check constraint name.
 * @return Returns the parsed check constraint.
 */
  final public CheckConstraint CheckConstraint(ConstraintIdentifier constraintIdentifier) throws ParseException {
  AttributeIdentifier attributeIdentifier;
  Expression expression;
    jj_consume_token(CHECK);
    jj_consume_token(LPAREN);
    attributeIdentifier = AttributeIdentifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IS:
      expression = NotNull(attributeIdentifier);
      break;
    case BETWEEN:
      expression = Between(attributeIdentifier);
      break;
    case LT:
    case LEQ:
    case GEQ:
    case GT:
    case NEQ:
    case EQ:
      expression = CheckComparison(attributeIdentifier);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RPAREN);
    {if (true) return new CheckConstraint(constraintIdentifier, expression);}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a check constraint null condition.
 * @param attributeIdentifier A attribute identifier node which represent the check constraint condition attribute name.
 * @return Returns the parsed check constraint null condition.
 */
  final public UnaryExpression NotNull(AttributeIdentifier attributeIdentifier) throws ParseException {
    jj_consume_token(IS);
    jj_consume_token(NOT);
    jj_consume_token(NULL);
    {if (true) return new UnaryExpression(attributeIdentifier, UnaryExpression.Operator.ISNOTNULL);}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a check constraint between condition.
 * @param attributeIdentifier A attribute identifier node which represent the check constraint condition attribute name.
 * @return Returns the parsed check constraint between condition.
 */
  final public BetweenExpression Between(AttributeIdentifier attributeIdentifier) throws ParseException {
  BinaryExpression.Operator operator;
  Literal min;
  Literal max;
    jj_consume_token(BETWEEN);
    min = Constant();
    jj_consume_token(AND);
    max = Constant();
    {if (true) return new BetweenExpression(attributeIdentifier, min, max);}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a check constraint comparison condition.
 * @param attributeIdentifier A attribute identifier node which represent the check constraint condition attribute name.
 * @return Returns the parsed check constraint comparison condition.
 */
  final public BinaryExpression CheckComparison(AttributeIdentifier attributeIdentifier) throws ParseException {
  BinaryExpression.Operator operator;
  Literal rightConstant = null;
  AttributeIdentifier rightAttributeIdentifier = null;
    operator = ComparisonOperator();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      rightAttributeIdentifier = AttributeIdentifier();
      break;
    case INTEGER_CONSTANT:
    case STRING_CONSTANT:
    case NULL:
      rightConstant = Constant();
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return rightConstant == null ?
      new BinaryExpression(attributeIdentifier, operator, rightAttributeIdentifier) :
      new BinaryExpression(attributeIdentifier, operator, rightConstant);}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a drop table statement.
 * @return Returns the parsed drop table statement.
 */
  final public Statement DropTableStatement() throws ParseException {
  TableIdentifier tableIdentifier;
  Token cascadeConstraints = null;
  Token purge = null;
    jj_consume_token(DROP);
    jj_consume_token(TABLE);
    tableIdentifier = TableIdentifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CascadeConstraints:
      cascadeConstraints = jj_consume_token(CascadeConstraints);
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    {if (true) return new DropTableStatement(tableIdentifier, cascadeConstraints != null ? new CascadeConstraintsExtension() : null, purge != null ? new PurgeExtension() : null);}
    throw new Error("Missing return statement in function");
  }

/*****************************************************************
 * Data Manipulation Language (DML) SPECIFICATION STARTS HERE *
 *****************************************************************/

/**
 * Parse a data manipulation language statement.
 * @return Returns the parsed data manipulation language statement.
 */
  final public Statement DMLStatement() throws ParseException {
  Statement statement;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSERT:
      statement = InsertStatement();
      break;
    case DELETE:
      statement = DeleteStatement();
      break;
    case UPDATE:
      statement = UpdateStatement();
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a insert statement.
 * @return Returns the parsed insert statement.
 */
  final public Statement InsertStatement() throws ParseException {
  TableIdentifier identifier;
  List<Literal> values;
    jj_consume_token(INSERT);
    jj_consume_token(INTO);
    identifier = TableIdentifier();
    values = Values();
    {if (true) return new InsertStatement(identifier, values);}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a list of values.
 * @return Returns the parsed list of values.
 */
  final public List<Literal> Values() throws ParseException {
  List<Literal> constants = new ArrayList<Literal>();
  Literal constant;
    jj_consume_token(VALUES);
    jj_consume_token(LPAREN);
    constant = Constant();
                                     constants.add(constant);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      constant = Constant();
                                      constants.add(constant);
    }
    jj_consume_token(RPAREN);
    {if (true) return constants;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a delete statement.
 * @return Returns the parsed delete statement.
 */
  final public Statement DeleteStatement() throws ParseException {
  TableIdentifier identifier;
  WhereClause whereClause = null;
    jj_consume_token(DELETE);
    jj_consume_token(FROM);
    identifier = TableIdentifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      whereClause = WhereClause();
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    {if (true) return new DeleteStatement(identifier, whereClause);}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a update statement.
 * @return Returns the parsed update statement.
 */
  final public Statement UpdateStatement() throws ParseException {
  TableIdentifier tableIdentifier;
  AttributeIdentifier attributeIdentifier;
  Literal constant;
  WhereClause whereClause = null;
    jj_consume_token(UPDATE);
    tableIdentifier = TableIdentifier();
    jj_consume_token(SET);
    attributeIdentifier = AttributeIdentifier();
    jj_consume_token(EQ);
    constant = Constant();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      whereClause = WhereClause();
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    {if (true) return new UpdateStatement(tableIdentifier, attributeIdentifier, constant, whereClause);}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a data manipulation where clause.
 * @return Returns the parsed data manipulation where clause.
 */
  final public WhereClause WhereClause() throws ParseException {
  BinaryExpression binaryExpression;
    jj_consume_token(WHERE);
    binaryExpression = DMLWhereComparison();
    {if (true) return new WhereClause(binaryExpression);}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a data manipulation where comparison.
 * @return Returns the parsed data manipulation where comparison.
 */
  final public BinaryExpression DMLWhereComparison() throws ParseException {
  AttributeIdentifier attributeIdentifier;
  BinaryExpression.Operator operator;
  Literal rightConstant;
    attributeIdentifier = AttributeIdentifier();
    operator = ComparisonOperator();
    rightConstant = Constant();
     {if (true) return new BinaryExpression(attributeIdentifier, operator, rightConstant);}
    throw new Error("Missing return statement in function");
  }

/*****************************************************************
 * Data Query Language (DQL) SPECIFICATION STARTS HERE *
 *****************************************************************/

/**
 * Parse a data query language statement.
 * @return Returns the parsed data query language statement.
 */
  final public Statement DQLStatement() throws ParseException {
  Statement statement;
    jj_consume_token(SELECT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COUNT:
      statement = SelectCountAllTableStatement();
      break;
    default:
      jj_la1[22] = jj_gen;
      if (jj_2_2(2147483647)) {
        statement = SelectGroupStatement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
        case IDENTIFIER:
          statement = SelectNoGroupStatement();
          break;
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a select count all table statement.
 * @return Returns the parsed select count all table statement.
 */
  final public SelectCountAllTableStatement SelectCountAllTableStatement() throws ParseException {
  TableIdentifier tableIdentifier;
  CountFunction countFunction;
    countFunction = CountFunction();
    jj_consume_token(FROM);
    tableIdentifier = TableIdentifier();
    {if (true) return new SelectCountAllTableStatement(countFunction, tableIdentifier);}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a select no group statement.
 * @return Returns the parsed select no group statement.
 */
  final public SelectNoGroupStatement SelectNoGroupStatement() throws ParseException {
  AllAttributeIdentifier allAttributeIdentifier = null;
  List<FullyQualifiedAttributeIdentifier> fQattributeIdentifiers = new ArrayList<FullyQualifiedAttributeIdentifier>();
  List<TableIdentifier> tableIdentifiers;
  WhereClause whereClause = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
      allAttributeIdentifier = AllAttributeIdentifier();
      break;
    case IDENTIFIER:
      fQattributeIdentifiers = ListOfFullyQualifiedAttributeIdentifiers();
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(FROM);
    tableIdentifiers = ListOfTableIdentifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      whereClause = SelectWhereClause();
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    {if (true) return allAttributeIdentifier == null ?
      new SelectNoGroupStatement(fQattributeIdentifiers, tableIdentifiers, whereClause) :
      new SelectNoGroupStatement(allAttributeIdentifier, tableIdentifiers, whereClause);}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a select group statement.
 * @return Returns the parsed select group statement.
 */
  final public SelectGroupStatement SelectGroupStatement() throws ParseException {
  FullyQualifiedAttributeIdentifier fQAttributeIdentifier;
  Function function;
  List<TableIdentifier> tableIdentifiers;
  WhereClause whereClause = null;
  GroupByClause groupByClause;
  HavingClause havingClause = null;
    fQAttributeIdentifier = FullyQualifiedAttributeIdentifier();
    jj_consume_token(COMMA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COUNT:
      function = CountFunction();
      break;
    case SUM:
      function = SumFunction();
      break;
    case MAX:
      function = MaxFunction();
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(FROM);
    tableIdentifiers = ListOfTableIdentifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      whereClause = SelectWhereClause();
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    groupByClause = GroupBySuffix();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HAVING:
      havingClause = SelectHavingSuffix();
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    {if (true) return new SelectGroupStatement(fQAttributeIdentifier, function, tableIdentifiers, whereClause, groupByClause, havingClause);}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a select group by clause.
 * @return Returns the parsed select group by clause.
 */
  final public GroupByClause GroupBySuffix() throws ParseException {
  FullyQualifiedAttributeIdentifier fQAttributeIdentifier;
    jj_consume_token(GROUP);
    jj_consume_token(BY);
    fQAttributeIdentifier = FullyQualifiedAttributeIdentifier();
    {if (true) return new GroupByClause(fQAttributeIdentifier);}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a select having clause.
 * @return Returns the parsed select having clause.
 */
  final public HavingClause SelectHavingSuffix() throws ParseException {
  CountFunction countFunction;
  IntegerLiteral integerLiteral;
  BinaryExpression.Operator operator;
    jj_consume_token(HAVING);
    jj_consume_token(LPAREN);
    countFunction = CountFunction();
    operator = ComparisonOperator();
    integerLiteral = IntegerLiteral();
    jj_consume_token(RPAREN);
    {if (true) return new HavingClause(new BinaryExpression(countFunction, operator, integerLiteral));}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a list of table identifier names.
 * @return Returns the parsed list of table identifier names.
 */
  final public List<TableIdentifier> ListOfTableIdentifier() throws ParseException {
  TableIdentifier tableIdentifier;
  List<TableIdentifier> tableIdentifiers = new ArrayList<TableIdentifier>();
    tableIdentifier = TableIdentifier();
                                        tableIdentifiers.add(tableIdentifier);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      tableIdentifier = TableIdentifier();
                                                                                                                                 tableIdentifiers.add(tableIdentifier);
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    {if (true) return tableIdentifiers;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a list of fully qualified attribute identifier names.
 * @return Returns the parsed list of fully qualified attribute identifier names.
 */
  final public List<FullyQualifiedAttributeIdentifier> ListOfFullyQualifiedAttributeIdentifiers() throws ParseException {
  List<FullyQualifiedAttributeIdentifier> fQattributeIdentifiers = new ArrayList<FullyQualifiedAttributeIdentifier>();
  FullyQualifiedAttributeIdentifier fQAttributeIdentifier;
    fQAttributeIdentifier = FullyQualifiedAttributeIdentifier();
                                                                fQattributeIdentifiers.add(fQAttributeIdentifier);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      fQAttributeIdentifier = FullyQualifiedAttributeIdentifier();
                                                                          fQattributeIdentifiers.add(fQAttributeIdentifier);
    }
    {if (true) return fQattributeIdentifiers;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a select where clause.
 * @return Returns the parsed select where clause.
 */
  final public WhereClause SelectWhereClause() throws ParseException {
   BinaryExpression binaryExpression;
    jj_consume_token(WHERE);
    if (jj_2_3(2147483647)) {
      binaryExpression = ListOfNonJoinConditions();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        binaryExpression = JoinConditionWithNonJoinCondition();
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return new WhereClause(binaryExpression);}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a join condition and optional a non join condition.
 * @return Returns the parsed join condition and optional a non join condition as a nested binary expression.
 */
  final public BinaryExpression JoinConditionWithNonJoinCondition() throws ParseException {
  BinaryExpression binaryExpressionLeft;
  BinaryExpression.Operator operator = null;
  BinaryExpression binaryExpressionRight = null;
    binaryExpressionLeft = JoinCondition();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      jj_consume_token(AND);
                                                   operator = BinaryExpression.Operator.AND;
      binaryExpressionRight = ListOfNonJoinConditions();
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    {if (true) return operator != null && binaryExpressionRight != null ?
     new BinaryExpression(binaryExpressionLeft, operator, binaryExpressionRight) :
     binaryExpressionLeft;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a join condition.
 * @return Returns the parsed join condition as a binary expression.
 */
  final public BinaryExpression JoinCondition() throws ParseException {
  FullyQualifiedAttributeIdentifier fQAttributeIdentifierLeft;
  BinaryExpression.Operator operator;
  FullyQualifiedAttributeIdentifier fQAttributeIdentifierRight;
    jj_consume_token(LPAREN);
    fQAttributeIdentifierLeft = FullyQualifiedAttributeIdentifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      jj_consume_token(EQ);
           operator = BinaryExpression.Operator.EQ;
      break;
    case LEQ:
      jj_consume_token(LEQ);
                                                                operator = BinaryExpression.Operator.LEQ;
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    fQAttributeIdentifierRight = FullyQualifiedAttributeIdentifier();
    jj_consume_token(RPAREN);
    {if (true) return new BinaryExpression(fQAttributeIdentifierLeft, operator, fQAttributeIdentifierRight);}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a combined of non join condition.
 * @return Returns the parsed list of non join condition as a nested binary expression.
 */
  final public BinaryExpression ListOfNonJoinConditions() throws ParseException {
  BinaryExpression binaryExpressionLeft;
  BinaryExpression.Operator operator = null;
  BinaryExpression binaryExpressionRight = null;
    jj_consume_token(LPAREN);
    binaryExpressionLeft = NonJoinCondition();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
    case OR:
    case LPAREN:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          jj_consume_token(AND);
                                                                 operator = BinaryExpression.Operator.AND;
          break;
        case OR:
          jj_consume_token(OR);
                                                                                                                       operator = BinaryExpression.Operator.OR;
          break;
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
      binaryExpressionRight = NonJoinCondition();
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    {if (true) return operator != null && binaryExpressionRight != null ?
      new BinaryExpression(binaryExpressionLeft, operator, binaryExpressionRight) :
      binaryExpressionLeft;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a non join condition.
 * @return Returns the parsed non join condition as a binary expression.
 */
  final public BinaryExpression NonJoinCondition() throws ParseException {
  FullyQualifiedAttributeIdentifier fQAttributeIdentifier;
  BinaryExpression.Operator operator;
  Literal literal;
    jj_consume_token(LPAREN);
    fQAttributeIdentifier = FullyQualifiedAttributeIdentifier();
    operator = ComparisonOperator();
    literal = Constant();
    jj_consume_token(RPAREN);
     {if (true) return new BinaryExpression(fQAttributeIdentifier, operator, literal);}
    throw new Error("Missing return statement in function");
  }

/*****************************************************************
 * General Procutions STARTS HERE *
 *****************************************************************/

/**
 * Parse a comparison operator.
 * @return Returns the parsed comparison operator.
 */
  final public BinaryExpression.Operator ComparisonOperator() throws ParseException {
  BinaryExpression.Operator operator;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      jj_consume_token(EQ);
            operator = BinaryExpression.Operator.EQ;
      break;
    case NEQ:
      jj_consume_token(NEQ);
             operator = BinaryExpression.Operator.NEQ;
      break;
    case GT:
      jj_consume_token(GT);
            operator = BinaryExpression.Operator.GT;
      break;
    case GEQ:
      jj_consume_token(GEQ);
             operator = BinaryExpression.Operator.GEQ;
      break;
    case LT:
      jj_consume_token(LT);
            operator = BinaryExpression.Operator.LT;
      break;
    case LEQ:
      jj_consume_token(LEQ);
             operator = BinaryExpression.Operator.LEQ;
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return operator;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a constant.
 * @return Returns the parsed constant.
 */
  final public Literal Constant() throws ParseException {
  Token token;
  Literal literal;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_CONSTANT:
      token = jj_consume_token(INTEGER_CONSTANT);
                                  literal = new IntegerLiteral(token);
      break;
    case STRING_CONSTANT:
      token = jj_consume_token(STRING_CONSTANT);
                                 literal = new StringLiteral(token);
      break;
    case NULL:
      token = jj_consume_token(NULL);
                      literal = new NullLiteral(token);
      break;
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return literal;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a attribute identifier.
 * @return Returns the parsed attribute identifier.
 */
  final public AttributeIdentifier AttributeIdentifier() throws ParseException {
  Token identifier;
    identifier = jj_consume_token(IDENTIFIER);
    {if (true) return new AttributeIdentifier(identifier);}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a all attribute identifier.
 * @return Returns the parsed all attribute identifier.
 */
  final public AllAttributeIdentifier AllAttributeIdentifier() throws ParseException {
  Token identifier;
    identifier = jj_consume_token(STAR);
    {if (true) return new AllAttributeIdentifier(identifier);}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a fully qualified attribute identifier.
 * @return Returns the parsed fully qualified attribute identifier.
 */
  final public FullyQualifiedAttributeIdentifier FullyQualifiedAttributeIdentifier() throws ParseException {
  Token identifier;
  AttributeIdentifier attributeIdentifier;
    identifier = jj_consume_token(IDENTIFIER);
    jj_consume_token(DOT);
    attributeIdentifier = AttributeIdentifier();
    {if (true) return new FullyQualifiedAttributeIdentifier(identifier, attributeIdentifier);}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a table identifier.
 * @return Returns the parsed table identifier.
 */
  final public TableIdentifier TableIdentifier() throws ParseException {
  Token identifier;
    identifier = jj_consume_token(IDENTIFIER);
    {if (true) return new TableIdentifier(identifier);}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a integer literal.
 * @return Returns the parsed integer literal.
 */
  final public IntegerLiteral IntegerLiteral() throws ParseException {
  Token token;
    token = jj_consume_token(INTEGER_CONSTANT);
    {if (true) return new IntegerLiteral(token);}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a string literal.
 * @return Returns the parsed string literal.
 */
  final public StringLiteral StringLiteral() throws ParseException {
  Token token;
    token = jj_consume_token(STRING_CONSTANT);
    {if (true) return new StringLiteral(token);}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a count() function.
 * @return Returns the parsed count() function.
 */
  final public CountFunction CountFunction() throws ParseException {
  AllAttributeIdentifier allAttributeIdentifier;
    jj_consume_token(COUNT);
    jj_consume_token(LPAREN);
    allAttributeIdentifier = AllAttributeIdentifier();
    jj_consume_token(RPAREN);
    {if (true) return new CountFunction(allAttributeIdentifier);}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a sum() function.
 * @return Returns the parsed sum() function.
 */
  final public SumFunction SumFunction() throws ParseException {
  FullyQualifiedAttributeIdentifier fQAttributeIdentifier;
    jj_consume_token(SUM);
    jj_consume_token(LPAREN);
    fQAttributeIdentifier = FullyQualifiedAttributeIdentifier();
    jj_consume_token(RPAREN);
    {if (true) return new SumFunction(fQAttributeIdentifier);}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a max() function.
 * @return Returns the parsed max() function.
 */
  final public MaxFunction MaxFunction() throws ParseException {
  FullyQualifiedAttributeIdentifier fQAttributeIdentifier;
    jj_consume_token(MAX);
    jj_consume_token(LPAREN);
    fQAttributeIdentifier = FullyQualifiedAttributeIdentifier();
    jj_consume_token(RPAREN);
    {if (true) return new MaxFunction(fQAttributeIdentifier);}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_3R_6() {
    if (jj_3R_8()) return true;
    if (jj_3R_9()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_10()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_7()) return true;
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(126)) {
    jj_scanpos = xsp;
    if (jj_scan_token(127)) {
    jj_scanpos = xsp;
    if (jj_scan_token(128)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(VARCHAR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(STRING_CONSTANT)) return true;
    return false;
  }

  private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) return true;
    }
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(DEFAULT_Token)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(INTEGER_CONSTANT)) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public SqlParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[39];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20000000,0x20000000,0x0,0x0,0x600,0x600,0x0,0x0,0x0,0x600,0x0,0x0,0x800000,0x0,0x800000,0x100000,0x600,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x0,0x8000,0x8000,0x8000,0x0,0x600,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x400024,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x800000,0x0,0x0,0x0,0x4000000,0x0,0x0,0x400004,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x8000,0x8000,0x0,0x100,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x6000800,0x0,0x6000800,0x0,0x0,0x10000000,0x1000,0x0,0x100000,0x100000,0x40000000,0x0,0x0,0x100000,0xc0000000,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0xc,0xc,0x0,0x0,0x80,0x80,0x80,0x0,0x0,0x0,0x0,0x80,0x0,0x1f800,0x10,0x0,0x0,0x80,0x0,0x0,0x0,0x12,0x12,0x0,0x1,0x0,0x0,0x80,0x80,0x20,0x0,0x11000,0x0,0x0,0x20,0x1f800,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[3];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SqlParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SqlParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SqlParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SqlParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SqlParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SqlParser(SqlParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SqlParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[145];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 39; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 145; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
